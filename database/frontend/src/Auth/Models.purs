-- File auto generated by purescript-bridge! --
module Auth.Models where

import Data.Either (Either)
import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import GHC.Int (Int64)
import Prelude (Unit)
import Prim (String)

import Prelude

import Data.Argonaut (class DecodeJson, class EncodeJson)
import Data.Argonaut.Generic (genericDecodeJson, genericEncodeJson)

newtype CreateUser
  = CreateUser
      { _createUserName :: String
      , _createUserEmail :: String
      , _createUserPassword :: String
      }


derive instance eqCreateUser :: Eq CreateUser
derive instance ordCreateUser :: Ord CreateUser
derive instance genericCreateUser :: Generic CreateUser _
derive instance newtypeCreateUser :: Newtype CreateUser _

instance decodeCreateUser:: DecodeJson CreateUser where
    decodeJson = genericDecodeJson
instance encodeCreateUser :: EncodeJson CreateUser where
    encodeJson = genericEncodeJson

--------------------------------------------------------------------------------
_CreateUser :: Iso' CreateUser { _createUserName :: String
                               , _createUserEmail :: String
                               , _createUserPassword :: String }
_CreateUser = _Newtype

createUserName :: Lens' CreateUser String
createUserName = _Newtype <<< prop (SProxy :: SProxy "_createUserName")

createUserEmail :: Lens' CreateUser String
createUserEmail = _Newtype <<< prop (SProxy :: SProxy "_createUserEmail")

createUserPassword :: Lens' CreateUser String
createUserPassword = _Newtype <<< prop (SProxy :: SProxy "_createUserPassword")
--------------------------------------------------------------------------------
newtype CreateUserResponse
  = CreateUserResponse
      { _createUserResponse :: Either String Unit
      }


derive instance eqCreateUserResponse :: Eq CreateUserResponse
derive instance ordCreateUserResponse :: Ord CreateUserResponse
derive instance genericCreateUserResponse :: Generic CreateUserResponse _
derive instance newtypeCreateUserResponse :: Newtype CreateUserResponse _

instance decodeCreateUserResponse:: DecodeJson CreateUserResponse where
    decodeJson = genericDecodeJson
instance encodeCreateUserResponse :: EncodeJson CreateUserResponse where
    encodeJson = genericEncodeJson


--------------------------------------------------------------------------------
_CreateUserResponse :: Iso' CreateUserResponse { _createUserResponse :: Either String Unit }
_CreateUserResponse = _Newtype

createUserResponse :: Lens' CreateUserResponse (Either String Unit)
createUserResponse = _Newtype <<< prop (SProxy :: SProxy "_createUserResponse")
--------------------------------------------------------------------------------
newtype Login
  = Login
      { _loginEmail :: String
      , _loginPassword :: String
      }


derive instance eqLogin :: Eq Login
derive instance ordLogin :: Ord Login
derive instance genericLogin :: Generic Login _
derive instance newtypeLogin :: Newtype Login _


instance decodeLogin:: DecodeJson Login where
    decodeJson = genericDecodeJson
instance encodeLogin :: EncodeJson Login where
    encodeJson = genericEncodeJson

--------------------------------------------------------------------------------
_Login :: Iso' Login { _loginEmail :: String, _loginPassword :: String }
_Login = _Newtype

loginEmail :: Lens' Login String
loginEmail = _Newtype <<< prop (SProxy :: SProxy "_loginEmail")

loginPassword :: Lens' Login String
loginPassword = _Newtype <<< prop (SProxy :: SProxy "_loginPassword")
--------------------------------------------------------------------------------
newtype User
  = User
      { _userId :: Int64
      , _userName :: String
      , _userEmail :: String
      }


derive instance eqUser :: Eq User
derive instance ordUser :: Ord User
derive instance genericUser :: Generic User _
derive instance newtypeUser :: Newtype User _

instance decodeUser:: DecodeJson User where
    decodeJson = genericDecodeJson
instance encodeUser :: EncodeJson User where
    encodeJson = genericEncodeJson


--------------------------------------------------------------------------------
_User :: Iso' User { _userId :: Int64
                   , _userName :: String
                   , _userEmail :: String }
_User = _Newtype

userId :: Lens' User Int64
userId = _Newtype <<< prop (SProxy :: SProxy "_userId")

userName :: Lens' User String
userName = _Newtype <<< prop (SProxy :: SProxy "_userName")

userEmail :: Lens' User String
userEmail = _Newtype <<< prop (SProxy :: SProxy "_userEmail")
--------------------------------------------------------------------------------
