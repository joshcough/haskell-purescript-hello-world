-- File auto generated by purescript-bridge! --
module Models where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Prim (Array, Int, String)

import Data.Argonaut (class DecodeJson, class EncodeJson)
import Data.Argonaut.Generic (genericDecodeJson, genericEncodeJson)

import Prelude

newtype Message
  = Message
      { _messageText :: String
      , _messageInt :: Int
      , _messageList :: Array Int
      }


derive instance eqMessage :: Eq Message
derive instance ordMessage :: Ord Message
derive instance genericMessage :: Generic Message _
derive instance newtypeMessage :: Newtype Message _

instance decodeMessage:: DecodeJson Message where
    decodeJson = genericDecodeJson
instance encodeMessage :: EncodeJson Message where
    encodeJson = genericEncodeJson

--------------------------------------------------------------------------------
_Message :: Iso' Message { _messageText :: String
                         , _messageInt :: Int
                         , _messageList :: Array Int }
_Message = _Newtype

messageText :: Lens' Message String
messageText = _Newtype <<< prop (SProxy :: SProxy "_messageText")

messageInt :: Lens' Message Int
messageInt = _Newtype <<< prop (SProxy :: SProxy "_messageInt")

messageList :: Lens' Message (Array Int)
messageList = _Newtype <<< prop (SProxy :: SProxy "_messageList")
--------------------------------------------------------------------------------
